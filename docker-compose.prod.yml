version: "3.9"

services:
  db:
    image: postgres:16
    container_name: poc-ab-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dungeon}
      POSTGRES_USER: ${POSTGRES_USER:-dungeon}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
    volumes:
      - pgdata:/var/lib/postgresql/data:rw
    networks:
      - poc-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dungeon} -d ${POSTGRES_DB:-dungeon}"]
      interval: 10s
      timeout: 5s
      retries: 10

  app:
    image: ${APP_IMAGE:-poc-automated-test-a-b:latest}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: poc-ab-app
    environment:
      # DB (point to compose's 'db' service)
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-dungeon}
      POSTGRES_USER: ${POSTGRES_USER:-dungeon}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}

      # AB split (0..100)
      AB_SPLIT_A: ${AB_SPLIT_A:-50}

      # Spring boot profile (set to 'prod' if available)
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}

      # Optional: control swagger exposure
      SPRINGDOC_API_DOCS_ENABLED: ${SPRINGDOC_API_DOCS_ENABLED:-true}

      # JVM options (override if needed)
      JAVA_OPTS: ${JAVA_OPTS:-"-XX:+UseG1GC -Xms256m -Xmx512m"}
    ports:
      - "${HOST_PORT_APP:-8080}:8080"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - poc-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 10

volumes:
  pgdata:

networks:
  poc-net:
    driver: bridge
